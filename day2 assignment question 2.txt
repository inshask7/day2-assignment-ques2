DAY 2 ASSIGNMENT
QUESTION 2 


Different methods of array in javascript


  Changing Elements
Array elements are accessed using their index number:

Array indexes start with 0. [0] is the first array element, [1] is the second, [2] is the third ...

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0] = "Kiwi";        // Changes the first element of fruits to "Kiwi"
The length property provides an easy way to append a new element to an array:

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";          // Appends "Kiwi" to fruits
Deleting Elements
Since JavaScript arrays are objects, elements can be deleted by using the JavaScript operator delete:

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];           // Changes the first element in fruits to undefined
Using delete may leave undefined holes in the array. Use pop() or shift() instead.

   Splicing an Array
The splice() method can be used to add new items to an array:

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
The first parameter (2) defines the position where new elements should be added (spliced in).

The second parameter (0) defines how many elements should be removed.

The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.

The splice() method returns an array with the deleted items:

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 2, "Lemon", "Kiwi");
Using splice() to Remove Elements
With clever parameter setting, you can use splice() to remove elements without leaving "holes" in the array:

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);        // Removes the first element of fruits
The first parameter (0) defines the position where new elements should be added (spliced in).

The second parameter (1) defines how many elements should be removed.

The rest of the parameters are omitted. No new elements will be added.

Merging (Concatenating) Arrays
The concat() method creates a new array by merging (concatenating) existing arrays:

Example (Merging Two Arrays)
var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);   // Concatenates (joins) myGirls and myBoys
The concat() method does not change the existing arrays. It always returns a new array.

The concat() method can take any number of array arguments:

Example (Merging Three Arrays)
var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias", "Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);   // Concatenates arr1 with arr2 and arr3
The concat() method can also take strings as arguments:

Example (Merging an Array with Values)
var arr1 = ["Emil", "Tobias", "Linus"];
var myChildren = arr1.concat("Peter"); 
Slicing an Array
The slice() method slices out a piece of an array into a new array.

This example slices out a part of an array starting from array element 1 ("Orange"):

Example
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1);
The slice() method creates a new array. It does not remove any elements from the source array.

This example slices out a part of an array starting from array element 3 ("Apple"):

Example
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(3);
The slice() method can take two arguments like slice(1, 3).

The method then selects elements from the start argument, and up to (but not including) the end argument.

Example
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1, 3);
If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.

Example
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(2);
Automatic toString()
JavaScript automatically converts an array to a comma separated string when a primitive value is expected.

This is always the case when you try to output an array.

Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
Example
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits;
All JavaScript objects have a toString() method





differnt method of string:



Method                                   	Description
charAt()	                Returns the character at the specified index (position)
charCodeAt()	                Returns the Unicode of the character at the specified index
concat()	                Joins two or more strings, and returns a new joined strings
endsWith()	                Checks whether a string ends with specified string/characters
fromCharCode()	                Converts Unicode values to characters
includes()	                Checks whether a string contains the specified string/characters
indexOf()	                Returns the position of the first found occurrence of a specified value in a string
lastIndexOf()	                Returns the position of the last found occurrence of a specified value in a string
localeCompare()	                Compares two strings in the current locale
match()	                        Searches a string for a match against a regular expression, and returns the matches
repeat()	                Returns a new string with a specified number of copies of an existing string
replace()	                Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced
search()	                Searches a string for a specified value, or regular expression, and returns the position of the match
slice()                 	Extracts a part of a string and returns a new string
split()	                        Splits a string into an array of substrings
startsWith()	                Checks whether a string begins with specified characters
substr()	                Extracts the characters from a string, beginning at a specified start position, and through the specified number of character
substring()	                Extracts the characters from a string, between two specified indices
toLocaleLowerCase()	        Converts a string to lowercase letters, according to the host's locale
toLocaleUpperCase()	        Converts a string to uppercase letters, according to the host's locale
toLowerCase()	                Converts a string to lowercase letters
toString()	                Returns the value of a String object
toUpperCase()	                Converts a string to uppercase letters
trim()	                        Removes whitespace from both ends of a string
valueOf()	                Returns the primitive value of a String object



